#!/bin/bash

set -e

prog="$(basename $0)"
cd "$(dirname $0)"

source ./lfs-env

stages="stage1a stage1b stage1c stage2 stage3"
for stage in $stages; do
    images+="lfs-${stage} "
done
images+="lfs-pod"
lfs_arch=$(arch)
rpmspec_flags=(--define "dist ${lfs_dist}")

usage() {
    cat <<EOF

Usage: $prog <command>

EOF
    exit 2
}

assert-stage() {
    if [ -z "$stage" ] ; then
        echo "$prog: error: stage name should precede command"
        exit 1
    fi
}

timestamp() {
    date +"%Y-%m-%d %H:%m:%S"
}

source-spec() {
    src_dir="$(echo $1 | sed  's_/$__')"
    pkg_name=$(basename "$src_dir" | sed 's_/$__')
    echo "$src_dir/$pkg_name.spec"
}

lfs-env() {
    env | grep -e "^lfs_" | sort
}

lfs-init() {
    if [ "$stage" == "stage1a" ] ; then
        build_arg="--build-arg lfs_host_image=${lfs_host_image}"
    fi

    set -x
    bash -c "source ./lfs-env ; env | grep -e '^lfs_'" > eval-lfs.env

    podman stop -t 0    lfs-$stage || true
    podman rm -f        lfs-$stage || true

    podman build --tag lfs-$stage $build_arg containers/lfs-$stage
    podman create \
        --name      lfs-$stage \
        --hostname  lfs-$stage \
        --env-file  eval-lfs.env \
        --userns    keep-id \
        --volume    "./build/rpms/${stage}:/rpmbuild/RPMS:z" \
        --volume    "./build/srpms:/rpmbuild/SRPMS:z" \
        --volume    .:/host:z \
        lfs-$stage
    podman start lfs-$stage
}

lfs-spectool() {
    name=$(basename ${1%.*})
    (
    set -x
    mkdir -p downloads/$name
    rm -rf tmp/spectool
    mkdir -p tmp/spectool

    rpmspec -P $1 > tmp/spectool/$name.spec
    ./spectool -d "with_lfs_stage1 1" -d "lfs_version ${lfs_version}" -g -C downloads/$name tmp/spectool/$name.spec
    )
}

lfs-download() {
    sources=$@
    [ -z "$sources" ] && sources="$(find sources -type d | sort | sed '1d')"
    for source in $sources; do
        spec="$(basename $source).spec"
        lfs-spectool "$source/$spec"
    done
}

lfs-checksums() {
    packages=$(ls downloads | grep -v root-fs)
    sources_dir="$(pwd)/sources"
    for package in $packages ; do
        if [ ! -e "$sources_dir/$package/$package.sha256" ] ; then
            echo $package
            mkdir -p "$sources_dir/$package"
            ( cd downloads/$package && sha256sum * > "$sources_dir/$package/$package.sha256" || true )
        fi
    done
}

lfs-build() {
    method=$1
    shift
    source_dirs=$*

    [ -z "$source_dirs" ] && source_dirs="$(cat containers/lfs-$stage/$stage.sources.txt | grep -ve '^#')"
    echo "" >> logs/build.log

    for source_dir in $source_dirs; do
        spec=$(source-spec "$source_dir")
        if [ ! -f "$spec" ] ; then
            echo "$prog: error: $spec: file not found"
            continue
        fi

        package=$(basename "$spec" .spec)
        # TODO: Add check here to make sure spec file is valid
        package_version=$(rpmspec --undefine dist --qf '%{NAME}-%{VERSION}-%{RELEASE}\n' -qv $spec | head -1 | sed 's/.src//')

        if [ "$package" == "gcc" ] && [ "$stage" == "stage1b" ] ; then
            rpm_pkg_flags="--replacefiles"
        fi

        if [ "$method" == "--reinstall" ] ; then
            rpm_pkg_flags="$rpm_pkg_flags --replacefiles --force"
        fi

        if [ ! -z "$*" ] || ! podman exec lfs-$stage rpm $rpm_db_flags -q $package ; then
            lfs-spectool "$spec"
            echo "$stage:$package" > logs/last-started
            echo "[$(timestamp)] start $stage:$package" >> logs/build.log
            echo -e "\n----- building $stage:$package"

            # make the sources directory by symlinking the needed parts
            rm -rf build/sources
            mkdir -p build/sources
            ( cd build/sources && \
                downloads=$(ls ../../downloads/$package)
                for download in $downloads; do
                    ln -s ../../downloads/${package}/$download .
                done
                sources=$(ls ../../sources/$package)
                for source in $sources; do
                    ln -s ../../sources/${package}/${source} .
                done
            )

            ( set -e -x
            podman exec lfs-$stage rpmbuild \
                --define "_topdir /rpmbuild" \
                --define "_sourcedir /host/build/sources" \
                --nodeps \
                $rpmbuild_flags \
                $rpmbuild_pkg_flags \
                /host/${spec} 2>&1 \
                | tee logs/${stage}/${package}.log

            package_arch=$(rpmspec "${rpmspec_flags[@]}" -q --queryformat="%{ARCH}\n"  "$spec" | head -1)

            podman exec --user root lfs-$stage rpm \
                $method \
                $rpm_flags \
                $rpm_pkg_flags \
                /rpmbuild/RPMS/$package_arch/${package_version}~${stage}${lfs_dist}.${package_arch}.rpm 2>&1 \
                | tee --append logs/${stage}/${package}.log
            )
            echo "$stage:$package" > logs/last-success
            echo "[$(timestamp)] done  $stage:$package" >> logs/build.log
        fi
    done
}

lfs-export() {
    case $stage in
        stage1a)
            (
            set -x
            podman exec --user root -t lfs-${stage} tar -C /lfs -c -z -f /host/build/containers/lfs-${stage}.tar.gz  .
            cp build/containers/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            )
            ;;
        stage1b)
            (
            set -x
            podman exec --user root -t lfs-${stage} tar -C /lfs -c -z -f /host/build/containers/lfs-${stage}.tar.gz --exclude=./tools .
            cp build/containers/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            )
            ;;
        stage1c)
            (
            set -x
            podman exec --user root -t lfs-$stage \
                tar -C / -c -z -f /host/build/containers/lfs-$stage.tar.gz \
                --exclude='./host' \
                --exclude='./rpmbuild' \
                --exclude='./tmp/*' \
                --exclude './home/*' \
                --exclude './root/*' \
                --exclude './dev/*' \
                --exclude './proc/*' \
                --exclude './sys/*' \
                --exclude './var/lib/rpm/*' \
                .
            cp build/containers/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            )
            ;;
        stage2)
            (
            set -x
            podman exec --user root -t lfs-$stage \
                tar -C / -c -z -f /host/build/containers/lfs-$stage.tar.gz \
                --exclude='./host' \
                --exclude='./rpmbuild/*' \
                --exclude='./tmp/*' \
                --exclude './home/*' \
                --exclude './root/*' \
                --exclude './dev/*' \
                --exclude './proc/*' \
                --exclude './sys/*' \
                .
            rm -rf build/boot
            podman cp "lfs-$stage:/boot" build/boot
            cp build/containers/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            )
            ;;
        *)
            echo "export not defined for $stage"
            exit 1
            ;;
    esac
}

lfs-mkimage() {
    export=$1

    if [ -z $export ] ; then
        usage-mkimage
    fi

    set -x
    rm -f "$lfs_root_img"
    truncate -s $lfs_root_size "$lfs_root_img"
    sudo mkfs -t ext4 "$lfs_root_img"
    sudo mkdir -p /run/lfs
    sudo mount "$lfs_root_img" /run/lfs
    sudo tar xf $export -C /run/lfs
    sudo cp -r fs/* /run/lfs
    sudo umount /run/lfs
}

lfs-mkimage-stage2() {
    lfs-mkimage build/containers/lfs-stage2.tar.gz
}

lfs-mkimage-pod() {
    lfs-mkimage build/containers/lfs-pod.tar.gz
}

lfs-install() {
    set -x
    sudo mkdir -p ${lfs_install_dir}
    sudo cp ${lfs_root_img} ${lfs_install_dir}
    sudo cp build/boot/vmlinuz ${lfs_install_dir}/lfs-${lfs_version}-vmlinuz
}

lfs-mkpod() {
    if [ "$stage" != "stage3" ] ; then
        echo "$prog: error: only in stage3"
        exit 1
    fi
    set -x
    podman exec --user root -t lfs-stage3 bash /host/containers/lfs-stage3/mkpod.sh
}

lfs-build-all() {
    ./lfs download

    ./lfs 1a init
    ./lfs 1a build
    ./lfs 1a export

    ./lfs 1b init
    ./lfs 1b build
    ./lfs 1b export

    ./lfs 1c init
    ./lfs 1c build
    ./lfs 1c export

    ./lfs 2 init
    ./lfs 2 build
    ./lfs 2 export
}

lfs-clean() {
    set -x
    rm -rf {build,logs}
    rm -rf containers/*/*.tar.gz
    rm -f eval.env
    podman stop --time 0 --ignore   $images || true
    podman rmi --force              $images || true
}

lfs-dist-clean() {
    set -x
    lfs-clean
    rm -rf build
}

if ! [[ -x $(command -v rpmbuild) ]]; then
	echo rpmbuild is not installed
	exit 1
fi

mkdir -p build/containers
mkdir -p sources
mkdir -p logs

mkdir -p build/{rpms,srpms}
for mkstage in $stages; do
    mkdir -p build/rpms/$mkstage
    mkdir -p logs/$mkstage
done

if [ "$with_check" != "1" ] ; then
    rpm_nocheck="--nocheck"
fi

case $1 in
    stage1a|1a)
        shift
        stage=stage1a
        next_stage=stage1b
        rpmbuild_flags="-bb $rpm_nocheck $RPMBUILD_FLAGS"
        rpm_db_flags="--dbpath=/var/lib/lfs-rpm"
        rpm_flags="--nodeps $rpm_db_flags"
        ;;
    stage1b|1b)
        shift
        stage=stage1b
        next_stage=stage1c
        rpmbuild_flags="-bb $rpm_nocheck $RPMBUILD_FLAGS"
        rpm_db_flags="--dbpath=/var/lib/lfs-rpm"
        rpm_flags="--nodeps $rpm_db_flags"
        ;;
    stage1c|1c)
        shift
        stage=stage1c
        next_stage=stage2
        rpmbuild_flags="-bb $rpm_nocheck $RPMBUILD_FLAGS"
        rpm_flags="--nodeps"
        ;;
    stage2|2)
        shift
        stage=stage2
        next_stage=stage3
        rpmbuild_flags="-bb $rpm_nocheck $RPMBUILD_FLAGS"
        rpm_flags="--nodeps"
        ;;
    stage3|3)
        shift
        stage=stage3
        rpmbuild_flags="-bb $rpm_nocheck $RPMBUILD_FLAGS"
        rpm_flags="--nodeps"
        ;;
    image)
        shift
        stage=image
        ;;
esac


case $1 in
    env)            lfs-env ;;
    checksums)      lfs-checksums ;;
    download)       shift ; lfs-download "$@" ;;
    init)           assert-stage && lfs-init ;;
    start)          assert-stage && podman start lfs-$stage ;;
    stop)           assert-stage && podman stop --timeout 0 lfs-$stage ;;
    build)          assert-stage && lfs-build --install ;;
    rpm)            assert-stage && shift ; lfs-build --reinstall "$@" ;;
    rpm-install)    assert-stage && shift ; rpmbuild_flags="--short-circuit --nocheck -bi" ; lfs-build --reinstall "$@" ;;
    shell)          assert-stage && exec podman exec -it lfs-$stage /bin/bash ;;
    root)           assert-stage && exec podman exec --user root -it lfs-$stage /bin/bash ;;
    export)         assert-stage && lfs-export ;;
    mkpod)          assert-stage && lfs-mkpod ;;
    mkimage)        lfs-mkimage-stage2 ;;
    mkimage-pod)    lfs-mkimage-pod ;;
    install)        lfs-install ;;
    clean)          lfs-clean ;;
    dist-clean)     lfs-dist-clean ;;
    build-all)      lfs-build-all ;;
    *)
        echo "$prog: error: invalid command" 1>&2
        usage
        ;;
esac

