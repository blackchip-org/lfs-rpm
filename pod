#!/bin/bash

set -e

prog="$(basename $0)"
cd "$(dirname $0)"

source ./env

usage() {
    cat <<EOF

Usage: $prog [specfile...]

EOF
    exit 2
}

pod-init() {
    set -x
    bash -c "source ./env ; env | grep -e '^lfs_'" > eval.env

    podman build --tag lfs-pod containers/lfs-pod
}

timestamp() {
    date +"%Y-%m-%d %H:%m:%S"
}

pod-build() {
    spec=$1
    package=$(basename "$1" .spec)

    ./lfs download $spec

    echo "pod:$package" > build/logs/last-started
    echo "[$(timestamp)] start pod:$package" >> build/logs/build.log
    echo -e "\n----- building pod:$spec"

    echo "creating container"

    podman stop -t 0    lfs-pod || true
    podman rm -f        lfs-pod || true

    mkdir -p        build/pod/rpms/x86_64
    mkdir -p        build/pod/srpms
    mkdir -p        build/logs/pod/

    podman create \
        --name      lfs-pod \
        --hostname  lfs-pod \
        --env-file  eval.env \
        --userns    keep-id \
        --volume    "./build/sources:/build/rpmbuild/SOURCES:z" \
        --volume    "./build/pod/rpms:/build/rpmbuild/RPMS:z" \
        --volume    "./build/pod/srpms:/build/rpmbuild/SRPMS:z" \
        --volume    .:/build/lfs-rpm:z \
        lfs-pod

    podman start lfs-pod

    echo "building repository"
    createrepo_c build/pod/rpms/x86_64

    rm -rf  build/deps
    mkdir   build/deps

    echo "finding dependencies"
    reqs=$(rpmspec -q --buildrequires $1)
    deps=$(dnf repoquery \
        --repofrompath pod,build/pod/rpms/x86_64 \
        --disablerepo='*' \
        --enablerepo=pod \
        --refresh \
        --requires \
        --resolve \
        $reqs)

    if [ -n "$reqs" ] ; then
        dnf download \
            --repofrompath pod,build/pod/rpms/x86_64 \
            --disablerepo='*' \
            --enablerepo=pod \
            --downloaddir build/deps \
            --refresh \
            --resolve \
            $reqs $deps

        echo -e "\ndependencies for $package are:"
        ls -1 build/deps
        echo

        echo "installing dependencies"
        podman exec \
            --user root \
            lfs-pod \
            rpm -i --verbose --force /build/lfs-rpm/build/deps/*.rpm
    fi

    echo "building $package"
    (
        set -e -o pipefail
        podman exec \
            lfs-pod \
            rpmbuild -ba --nocheck \
                --define "_sourcedir /build/rpmbuild/SOURCES/$package" \
                lfs-rpm/$1 | \
                tee build/logs/pod/${package}.log
    )

    echo "pod:$package" > build/logs/last-success
    echo "[$(timestamp)] done  pod:$package" >> build/logs/build.log

}

case $1 in
    init)
        pod-init
        ;;
    build)
        shift
        echo "" >> build/logs/build.log
        specs=$(grep -v -e '^#' $1)
        for arg in $specs; do
            package_version=$(rpmspec -qv $arg | head -1 | sed 's/.src//')
            if [ ! -e "build/pod/rpms/x86_64/${package_version}${lfs_pod_dist}.${lfs_arch}.rpm" ] ; then
                pod-build $arg
            fi
        done
        ;;
    rpm)
        shift
        for arg in $@ ; do
            pod-build $arg
        done
        ;;
    shell)
        exec podman exec -it lfs-pod /bin/bash
        ;;
    root)
        exec podman exec --user root -it lfs-pod /bin/bash
        ;;
    *)
        echo "$prog: error: invalid command" 1>&2
        usage
        ;;
esac

